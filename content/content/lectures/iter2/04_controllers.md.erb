---
title: Understanding controllers
desc: We jump deep into Rails controllers and MVC
homework: 1) Read [AWDR] Chapter 18, 19; 2) Read [AWDR] Chapter 8 while actually following along the example; 3) Read the Rails Doctrine
---
<%= homework_hdr %>
**Legend**: <%=partbadge%>: Participation | <%= timebadge %>: Early | <%= pdfbadge %>: PDF |  <%=cloudbadge %>: Portfolio | <%=zipbadge %>: Zipped

1. <%= partbadge %> <%= timebadge %> <%= pdfbadge %> **RORT:** Read [Ruby on Rails Tutorial (\[RORT\])](https://www.railstutorial.org/book/beginning#cha-beginning) Chapter 4, "Rails Flavored Ruby". This is anb easier chapter, reviewing a variety of Ruby topics that are extended in Rails. This is possible by the way because Ruby as a programming language is very extensible, and Rails takes advantage of this. It has not been unusual to notice features invented by the Rails team which over time get moved into Ruby core. This chapter is an excellent review of Ruby as well. As usual I really encourage and ask you to go through the code samples and actually type them in. You will see that it really helps your understanding and will assure your success in this course! Use your resources: the TAs, the class mailing list, stack overflow, google and push through to success! When you are done, go to Latte and answer these warmup questions:
  * Give me your explanation of what a symbol is in Ruby. Write a very brief few lines of Ruby to illustrate.
  * What is meant by the idea that Ruby classes can be "opened up" or "reopened"?
  * What is the difference between 'require' and 'require_relative' in Ruby?
  * Are there one or two things you are still confused by? If not, what one or two things were the most memorable about your reading? <%= deliverable "Do the warmup in Latte and submit by 8am on the day of class." %>
1. **Read:** [The Rails Doctrine](http://rubyonrails.org/doctrine/) and consider whether it's a good set of principles, how much you agree with them. We will discuss this in class.
1. **Projects:** You should be working or completed steps **GIT, DOCUMENTATION, PLANSKEL, SHEMASKEL, BUILDSKEL, STORYSDV, PAPERSDV, SCHEMASDV**.

#### Homework Discussion
<%= include_topic :url_rails %>

#### REST, Resources and Controllers
* Lets go more in depth: <%= link_to_topic :http %>
* We've had some discussions about designing URLs
* We talked about using a "directory structure-like" syntax for your URLs.
* Reference: [Rails Guide about Routing](http://guides.rubyonrails.org/routing.html)

#### Job of the controller
* Recall, the URL is parsed by the router, which locates and calls the right controller
* Breaking it down:
    1. Router parses URL
    1. Determines the controller (error: Can't find Controller's ruby file in app/controllers/)
    1. Determines the action insider the controller (error: Can't find a method for the action)
    1. Calls the action method, with the parameters corresponding to the 'rest' of the url
    1. When action completes, a view of the same name is located (error: Can't find Views html.erb file in the `views/<controllername>/` directory)
    1. View's 'erb' is expanded and returned, through controller, router, web server, back to the user.

#### Resources in Rails
* Automatic wiring of plumbing between urls, routing, models, and controllers
* Takes advantage of standardized patterns
    * Nesting model in the URLs
    * CRUD operations as actions
    * Path naming (path_to_user instead of "")
    * Controller naming
* Huge time saver and bug saver!

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
