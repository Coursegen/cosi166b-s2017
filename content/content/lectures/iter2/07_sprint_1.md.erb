---
title: (LAB) Sprint 1
desc: Intro to test driven development
homework: 1) Do the TDD Homework 2) Teams submit schema and stories; 3) Continue
cat: TDD
---

<%= homework_hdr %>
**Legend**: <%=partbadge%>: Participation | <%= timebadge %>: Early | <%= pdfbadge %>: PDF |  <%=cloudbadge %>: Portfolio | <%=zipbadge %>: Zipped

1. <%= zipbadge %> **TDD**: Read some background on Test Driven Development
  * Read [MiniTest::Spec tutorial](http://www.rubyinside.com/a-minitestspec-tutorial-elegant-spec-style-testing-that-comes-with-ruby-5354.html)
  * Read [Minitest Quick Reference](http://mattsears.com/articles/2011/12/10/minitest-quick-reference)
  * Read [Rails Testing Pyramid](http://blog.codeclimate.com/blog/2013/10/09/rails-testing-pyramid/)
  * Do the following assignment: <%= link_to_topic :hw_tdd %>. Do the work in your <%= link_to_intro :portfolio %> in a `tdd` directory. <%= deliverable "Zip up the directory and submit it in Latte." %>
1. <%= pdfbadge %> **Teams:** For this lab I'd like you to prepare two things:
  * List of stories, prioritized. Note that this should be your current best guess, but naturally you will be able to make changes as you go along. Remember that a story is a short description of a mini-feature. They often follow a format like "<who> can to <what>". Most of the time a story is one or a few sentences long. Think of it as what the programmer would what to know before trying implement the story. for example, "user can display to do list, and change the sort order either by priority or by date." You should google for product stories, or scrum stories, or writing a user story.
  * Carefully worked out schema for your product. Include table names, column names, column datatypes, primary and foreign keys, and One/Many to One/Many relatationship arrows.
  * <%= team_deliverable "pdf to the stories, and pdf with your schema." %>
1. <%= partbadge %> <%= pdfbadge %> **TDD** View a video talk by the original inventor of Rails where he debunks TDD. This video: [RailsConf 2014 Keynote](http://youtu.be/9LfmrkyP81M), from last year caused untold controversy. Watch it and write a brief reflection. <%= deliverable "Your reflection, with your summary of DHH's key arguments and your reaction to them. Max 1 page, pdf." %>
* **Projects:** You should be working on the steps up to around **\[URLSSDV\]** in <%= link_to_section :incubator, :project_roadmap %>

#### Discussion on homework
* Did you really do TDD? What is the key to it?
* How did it feel to program in this way? Was it easier, harder, different?
* Conventions: file names, separating the tests from the code (why?)

#### Sessions
<%= include_topic :sessions %>

#### Testing Intro
<%= include_topic :tdd_intro %>

#### Demo
* <%= link_to_topic :tdd_demo %>

#### Discussion
* What do "I" do with testing in "real life"?
* Let's review some of the options in [Minitest Quick Reference](http://mattsears.com/articles/2011/12/10/minitest-quick-reference)

##### Test Data
* Sometimes known as test fixtures
* What is the role of data in developing tests for your application
* Some ways of thinking about test data
* Avoiding Brittle tests
* Mocking objects
    * Let's look at some of the code that runs this web site.
    * Note slightly different syntax because of RSpec vs. minitest/spec
    * [citem_spec.rb](https://github.com/pitosalas/curriculu/blob/master/spec/citem_spec.rb)
    * [toc_spec.rb](https://github.com/pitosalas/curriculu/blob/master/spec/toc_spec.rb)

#### Testing in Rails (if we have time)
* Principle is the same
* Remember there's no good reason to test whether Rails is doing what it is supposed to do
* For example, whether validations are validating, or whether has_many is actually working
    * Maybe a few tests to poke some holes, but certainly not each and every test.
    
#### Let's take a tour of all the test bits that are created for free for you in Rails

##### shell commands
~~~~
rails new shoes
group :test do
  gem 'minitest-spec-rails'
end
bundle
rails generate scaffold Shoes name:string price:float color:string size:integer
rake db:migrate
~~~~

##### shoe_test.rb

<%= ruby_begin %>
require 'test_helper'

describe "Test Shoe Model" do
  before do
    Shoe.destroy_all
    @shoe1 = Shoe.create(name: "Pito's Shoe")
    @shoe2 = Shoe.create(name: "Black Beauties")
  end

  describe "Validations" do
    it "successfully gets created" do
      @shoe1.valid?.must_equal true
    end
  end

  describe "All are found" do
    it "finds them all" do
      Shoe.all.length.must_equal 2
    end
  end

end
<%= ruby_end %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>
